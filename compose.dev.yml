services:
  redis:
    image: redis:8.2-rc1-alpine
    container_name: rediguard-redis-stack-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-stack-data:/data
    environment:
      - REDIS_ARGS=--save 60 1000 --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rediguard-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: rediguard-backend-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend-cache:/app/.uv-cache
    networks:
      - rediguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: rediguard-frontend-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
      - WATCHPACK_POLLING=true
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend:/app
      - /app/.next
      - frontend-node-modules:/app/node_modules
    networks:
      - rediguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redisinsights:
    image: redislabs/redisinsight:latest
    container_name: rediguard-redisinsights-dev
    restart: unless-stopped
    ports:
      - "5540:5540"  # RedisInsight standalone
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - rediguard-network

volumes:
  redis-stack-data:
    driver: local
  backend-cache:
    driver: local
  frontend-node-modules:
    driver: local

networks:
  rediguard-network:
    driver: bridge
